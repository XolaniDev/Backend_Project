#pragma warning disable CS1591

// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using af.assessment.api.Data;

namespace af.assessment.api.Migrations
{
    [DbContext(typeof(VaccineDbContext))]
    [Migration("20220224125654_EditMember")]
    partial class EditMember
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("af.assessment.api.Data.Models.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AvailableDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateSelected")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("FamilyMemberId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("vaccineId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FamilyMemberId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("af.assessment.api.Data.Models.ClinicLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClinicName")
                        .HasColumnType("text");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("ClinicLocations");
                });

            modelBuilder.Entity("af.assessment.api.Data.Models.FamilyMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<int>("Relationship")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("FamilyMembers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8c907bc1-8c37-4c71-95e3-c35519280062"),
                            FirstName = "Maddy",
                            IdentificationNumber = "2109302345084",
                            LastName = "Mason",
                            MemberId = new Guid("2c2b6b15-3530-4a93-9a17-5f0bcd7423f9"),
                            Relationship = 2
                        },
                        new
                        {
                            Id = new Guid("77d4f8cc-9797-4f25-9b99-69fde7aeb495"),
                            FirstName = "Brad",
                            IdentificationNumber = "2109305234087",
                            LastName = "Mason",
                            MemberId = new Guid("2c2b6b15-3530-4a93-9a17-5f0bcd7423f9"),
                            Relationship = 3
                        });
                });

            modelBuilder.Entity("af.assessment.api.Data.Models.HealthcareProfessional", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("firstName")
                        .HasColumnType("text");

                    b.Property<string>("lastName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("HealthcareProfessionals");
                });

            modelBuilder.Entity("af.assessment.api.Data.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<int>("PostalCode")
                        .HasColumnType("integer");

                    b.Property<string>("StreetName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MemberId")
                        .IsUnique();

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dca21998-eeab-4291-aae2-44a7b5e8ff03"),
                            City = "Johannesburg",
                            MemberId = new Guid("2c2b6b15-3530-4a93-9a17-5f0bcd7423f9"),
                            PostalCode = 1220,
                            StreetName = "21st Street"
                        });
                });

            modelBuilder.Entity("af.assessment.api.Data.Models.MedicalDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("MainMemberName")
                        .HasColumnType("text");

                    b.Property<string>("MainMemberNumber")
                        .HasColumnType("text");

                    b.Property<string>("MedicalAidName")
                        .HasColumnType("text");

                    b.Property<string>("MedicalAidNumber")
                        .HasColumnType("text");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MemberId")
                        .IsUnique();

                    b.ToTable("MedicalDetails");

                    b.HasData(
                        new
                        {
                            Id = new Guid("35c1a665-7bb5-43f2-9423-beb9afdda515"),
                            MainMemberName = "Jamie Dimon",
                            MainMemberNumber = "(087)-999-8765",
                            MedicalAidName = "Discovery Life",
                            MedicalAidNumber = "001334761",
                            MemberId = new Guid("2c2b6b15-3530-4a93-9a17-5f0bcd7423f9")
                        });
                });

            modelBuilder.Entity("af.assessment.api.Data.Models.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("IdentificationNumber")
                        .HasColumnType("text");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("OtpPreference")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("text");

                    b.Property<string>("Salt")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c2b6b15-3530-4a93-9a17-5f0bcd7423f9"),
                            Email = "jamie@eblocks.co.za",
                            IdentificationNumber = "0001010000006",
                            MobileNumber = "(087)-999-8765",
                            Name = "Jamie Dimon",
                            OtpPreference = 0,
                            Password = "$2a$11$Gf6Mgp210F8A1n827CrlX.4WRQSB9BnNfOdE6Yu0hWdp6PABDWEKG",
                            ProfilePictureUrl = "https://dcvcstorage.blob.core.windows.net/profilepics/ben.jpg",
                            Salt = "$2a$11$Gf6Mgp210F8A1n827CrlX."
                        });
                });

            modelBuilder.Entity("af.assessment.api.Data.Models.Vaccine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AdministeredById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AdministeredDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("AppointmentId")
                        .HasColumnType("uuid");

                    b.Property<double>("BatchNumber")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("ClinicId")
                        .HasColumnType("uuid");

                    b.Property<double>("Dose")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("FamilyMemberId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Site")
                        .HasColumnType("text");

                    b.Property<bool>("VaccineStatus")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AdministeredById");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ClinicId");

                    b.HasIndex("FamilyMemberId");

                    b.ToTable("Vaccines");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fabda97c-eaff-41ca-ae32-0c0a099d2955"),
                            AdministeredDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BatchNumber = 0.0,
                            Dose = 0.070000000000000007,
                            FamilyMemberId = new Guid("8c907bc1-8c37-4c71-95e3-c35519280062"),
                            Name = "Haemophilus Influenzae type B",
                            VaccineStatus = true
                        },
                        new
                        {
                            Id = new Guid("8ce0c789-f7bd-4a9c-a491-45df5b386657"),
                            AdministeredDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BatchNumber = 0.0,
                            Dose = 0.12,
                            FamilyMemberId = new Guid("8c907bc1-8c37-4c71-95e3-c35519280062"),
                            Name = " Rotavirus Gastroenteritis",
                            VaccineStatus = false
                        },
                        new
                        {
                            Id = new Guid("e36265ea-0e0d-4a9c-8275-9cac364e75a6"),
                            AdministeredDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BatchNumber = 0.0,
                            Dose = 0.80000000000000004,
                            FamilyMemberId = new Guid("8c907bc1-8c37-4c71-95e3-c35519280062"),
                            Name = " Tetanus ",
                            VaccineStatus = true
                        });
                });

            modelBuilder.Entity("af.assessment.api.Data.Models.Appointment", b =>
                {
                    b.HasOne("af.assessment.api.Data.Models.FamilyMember", null)
                        .WithMany("Appointments")
                        .HasForeignKey("FamilyMemberId");
                });

            modelBuilder.Entity("af.assessment.api.Data.Models.ClinicLocation", b =>
                {
                    b.HasOne("af.assessment.api.Data.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("af.assessment.api.Data.Models.FamilyMember", b =>
                {
                    b.HasOne("af.assessment.api.Data.Models.Member", "Member")
                        .WithMany("FamilyMember")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("af.assessment.api.Data.Models.Location", b =>
                {
                    b.HasOne("af.assessment.api.Data.Models.Member", null)
                        .WithOne("Locations")
                        .HasForeignKey("af.assessment.api.Data.Models.Location", "MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("af.assessment.api.Data.Models.MedicalDetails", b =>
                {
                    b.HasOne("af.assessment.api.Data.Models.Member", null)
                        .WithOne("MedicalDetails")
                        .HasForeignKey("af.assessment.api.Data.Models.MedicalDetails", "MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("af.assessment.api.Data.Models.Vaccine", b =>
                {
                    b.HasOne("af.assessment.api.Data.Models.HealthcareProfessional", "AdministeredBy")
                        .WithMany()
                        .HasForeignKey("AdministeredById");

                    b.HasOne("af.assessment.api.Data.Models.Appointment", null)
                        .WithMany("Vaccines")
                        .HasForeignKey("AppointmentId");

                    b.HasOne("af.assessment.api.Data.Models.ClinicLocation", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId");

                    b.HasOne("af.assessment.api.Data.Models.FamilyMember", "FamilyMember")
                        .WithMany("Vaccines")
                        .HasForeignKey("FamilyMemberId");

                    b.Navigation("AdministeredBy");

                    b.Navigation("Clinic");

                    b.Navigation("FamilyMember");
                });

            modelBuilder.Entity("af.assessment.api.Data.Models.Appointment", b =>
                {
                    b.Navigation("Vaccines");
                });

            modelBuilder.Entity("af.assessment.api.Data.Models.FamilyMember", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Vaccines");
                });

            modelBuilder.Entity("af.assessment.api.Data.Models.Member", b =>
                {
                    b.Navigation("FamilyMember");

                    b.Navigation("Locations");

                    b.Navigation("MedicalDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
